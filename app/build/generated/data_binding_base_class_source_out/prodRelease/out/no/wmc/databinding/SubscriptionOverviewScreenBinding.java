// Generated by data binding compiler. Do not edit!
package no.wmc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.material.button.MaterialButton;
import java.lang.Deprecated;
import java.lang.Object;
import no.wmc.R;

public abstract class SubscriptionOverviewScreenBinding extends ViewDataBinding {
  @NonNull
  public final MaterialButton addSubscriptionButton;

  @NonNull
  public final LinearLayoutCompat addSubscriptionLayout;

  @NonNull
  public final TextView currentSubscription;

  @NonNull
  public final Button menuButton;

  @NonNull
  public final ConstraintLayout noSubscriptionLayout;

  @NonNull
  public final TextView noSubscriptionTitle;

  @NonNull
  public final RecyclerView subscriptionList;

  @NonNull
  public final TextView title;

  @NonNull
  public final Toolbar toolbar;

  @Bindable
  protected Boolean mIsLoading;

  protected SubscriptionOverviewScreenBinding(Object _bindingComponent, View _root,
      int _localFieldCount, MaterialButton addSubscriptionButton,
      LinearLayoutCompat addSubscriptionLayout, TextView currentSubscription, Button menuButton,
      ConstraintLayout noSubscriptionLayout, TextView noSubscriptionTitle,
      RecyclerView subscriptionList, TextView title, Toolbar toolbar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.addSubscriptionButton = addSubscriptionButton;
    this.addSubscriptionLayout = addSubscriptionLayout;
    this.currentSubscription = currentSubscription;
    this.menuButton = menuButton;
    this.noSubscriptionLayout = noSubscriptionLayout;
    this.noSubscriptionTitle = noSubscriptionTitle;
    this.subscriptionList = subscriptionList;
    this.title = title;
    this.toolbar = toolbar;
  }

  public abstract void setIsLoading(@Nullable Boolean isLoading);

  @Nullable
  public Boolean getIsLoading() {
    return mIsLoading;
  }

  @NonNull
  public static SubscriptionOverviewScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.subscription_overview_screen, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static SubscriptionOverviewScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<SubscriptionOverviewScreenBinding>inflateInternal(inflater, R.layout.subscription_overview_screen, root, attachToRoot, component);
  }

  @NonNull
  public static SubscriptionOverviewScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.subscription_overview_screen, null, false, component)
   */
  @NonNull
  @Deprecated
  public static SubscriptionOverviewScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<SubscriptionOverviewScreenBinding>inflateInternal(inflater, R.layout.subscription_overview_screen, null, false, component);
  }

  public static SubscriptionOverviewScreenBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static SubscriptionOverviewScreenBinding bind(@NonNull View view,
      @Nullable Object component) {
    return (SubscriptionOverviewScreenBinding)bind(component, view, R.layout.subscription_overview_screen);
  }
}
