/*
Import this script in *root* build file:

subprojects {
    apply from: "$rootDir/gradle/scripts/checks.gradle"
}

Note, that you should use at least Gradle v2.11 (as set in gradle/gradle-wrapper.properties).

If you need to provide custom config files use:

android {
   lintOptions {
       lintConfig file('.../lint.xml')
   }
}

checkstyle {
   configFile file('.../checkstyle.xml')
}
*/

def final REPORTS_DIR = 'build/reports'

/* --------------- */
/* Lint            */
/* --------------- */

project.afterEvaluate {
    if (!project.hasProperty('android')) return

    android {
        // http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html
        lintOptions {
            abortOnError false // Errors report will be generated and shown by Jenkins

            // Overriding lintConfig method to apply severity levels from lint config file
            // to 'lintOptions' object, to be applied by Android Studio (which ignores config file)
            it.metaClass.lintConfig = { File file ->
                setLintConfig(file) // Calling original setter

                new XmlSlurper().parse(file).issue.each { issue ->
                    def severity = issue.@severity.text()
                    def id = issue.@id.text()
                    if (severity && id) {
                        "$severity"(id) // Dynamic call for methods like 'ignore(..)' and so on
                    }
                }
            }

            lintConfig file("$rootDir/gradle/scripts/checks/lint.xml")
        }
    }
}


/* --------------- */
/* Ktlint          */
/* --------------- */

apply plugin: 'org.jlleitschuh.gradle.ktlint'

ktlint {
    verbose = true
    android = true
    ignoreFailures = false
    disabledRules = [
            'import-ordering',
            'no-consecutive-blank-lines',
            'no-blank-line-before-rbrace'
    ]
    reporters {
        reporter 'checkstyle'
    }
}


/* --------------- */
/* Checkstyle      */
/* --------------- */

apply plugin: 'checkstyle'

checkstyle {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
    toolVersion = '8.32'
    configFile file("$rootDir/gradle/scripts/checks/checkstyle.xml")
    showViolations = false
}

task checkstyle(type: Checkstyle) {
    // https:docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
    source 'src'
    include '**/*.java', '**/*.xml'
    exclude '**/gen/**'
    classpath = files()
    reports {
        html.destination file("$REPORTS_DIR/checkstyle/checkstyle-result.html")
        xml.destination file("$REPORTS_DIR/checkstyle/checkstyle-result.xml")
    }
    ignoreFailures = true // Errors report will be generated and shown by Jenkins
}


/* --------------- */
/* Extra tasks     */
/* --------------- */

// Adding umbrella task for all checks
project.afterEvaluate {
    def check = rootProject.tasks.maybeCreate('checkAll')
    check.dependsOn addCheckTasks('Debug')
    check.dependsOn addCheckTasks('Release')
}

private def addCheckTasks(String mode) {
    def check = rootProject.tasks.maybeCreate("check${mode}All")
    tasks.forEach { task -> addTaskDep(check, task, mode) }
    tasks.whenTaskAdded { task -> addTaskDep(check, task, mode) }
    return check
}

private static def addTaskDep(check, task, mode) {
    if (task.name ==~ /lint.*${mode}/ ||
            task.name ==~ /ktlint.*${mode}Check/ ||
            task.name == 'checkstyle' ||
            task.name ==~ /test.*${mode}UnitTest/
    ) {
        check.dependsOn task
    }
}

// pre build run ktlintFormat
ext.addLintFormatPreBuild = {
    tasks.getByPath("preBuild").dependsOn(ktlintFormat)
}
